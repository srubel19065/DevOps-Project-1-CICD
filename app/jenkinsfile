pipeline {
    agent any
 
    environment {
        DOCKER_IMAGE = 'project-1-sparta-app:latest'
        DOCKER_REGISTRY = 'r21bxl'
        DOCKER_REGISTRY_CREDENTIALS = 'rubel-docker-registry'
        GIT_CREDENTIALS = 'rubel-github'
        KUBERNETES_CREDENTIALS = 'kube-config'
        KUBERNETES_DEPLOYMENT_NAME = 'project-1-sparta-app-deployment'
        KUBERNETES_SERVICE_NAME = 'project-1-sparta-app-svc'
        DEV_BRANCH = 'dev'
        MAIN_BRANCH = 'main'
    }
 
    stages {
        stage('Checkout') {
            steps {
                git branch: "${env.DEV_BRANCH}", credentialsId: "${GIT_CREDENTIALS}", url: 'https://github.com/srubel19065/DevOps-Project-1-CICD.git'
            }
        }
 
        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${DOCKER_REGISTRY}:${env.BUILD_ID}")
                }
            }
        }
 
        stage('Run Tests') {
            steps {
                script {
                    // Replace with your testing commands
                    sh 'npm install'
                    sh 'npm test'
                }
            }
        }
 
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('', "${DOCKER_REGISTRY_CREDENTIALS}") {
                        dockerImage.push("${env.BUILD_ID}")
                        dockerImage.push('latest')
                    }
                }
            }
        }
 
        stage('Merge to Main') {
            steps {
                script {
                    sh 'git config --global user.email "rubelsubhan12@gmail.com"'
                    sh 'git config --global user.name "srubel19065"'
                    sh """
                    git checkout ${MAIN_BRANCH}
                    git merge ${DEV_BRANCH}
                    git push origin ${MAIN_BRANCH}
                    """
                }
            }
        }
 
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withKubeConfig([credentialsId: "${KUBERNETES_CREDENTIALS}"]) {
                        sh """
                        kubectl set image deployment/${KUBERNETES_DEPLOYMENT_NAME} ${DOCKER_IMAGE}=${DOCKER_REGISTRY}:latest
                        kubectl rollout status deployment/${KUBERNETES_DEPLOYMENT_NAME}
                        """
                    }
                }
            }
        }
    }
 
    post {
        always {
            cleanWs()
        }
    }
}